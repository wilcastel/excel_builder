#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Ejemplo Pr√°ctico: Mapeo Din√°mico para ExcelBuilderPro
Caso espec√≠fico: Mapear 'Nombre programa' ‚Üí 'Tema' ‚Üí 'id'
"""

import pandas as pd
import sys
import os

# Agregar el directorio ra√≠z al path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.mapping_manager import MappingManager
from models.column_config import ColumnConfig, DataType

def crear_datos_ejemplo():
    """Crear datos de ejemplo basados en las im√°genes proporcionadas"""
    
    # Archivo fuente (capacitaciones virtuales 2025)
    source_data = {
        'C√≥digo m√≥dulo': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        'Nombre programa': [
            'DECRETO 1072 DEL 2015: BASE FUNDAMENTAL DEL SG-SST',
            'FUNCIONES Y RESPONSABILIDADES COPASST',
            'RECONOCIENDO Y PREVIENDO LOS RIESGOS PSIQ',
            'GESTI√ìN DE INDEPENDIENTES Y SU IMPORTANCIA',
            'ASPECTOS B√ÅSICOS DEL SG-SST',
            'AUDITOR√çA INTERNA DENTRO DEL SG-SST',
            'BRIGADISTA INTERMEDIO',
            'COACHING EN INTELIGENCIA EMOCIONAL',
            'COACHING EN SBC',
            'COACHING PARA LA SEGURIDAD Y SALUD EN EL TRABAJO'
        ],
        'Verificac': ['Equidad'] * 10,
        'Ciudad': ['Virtual'] * 10,
        'Fecha (DD/MM/AA)': ['18/02/25', '21/02/25', '25/02/25', '28/02/25', '04/03/25', 
                            '07/03/25', '11/03/25', '14/03/25', '18/03/25', '21/03/25'],
        'Direcci': ['Virtual'] * 10,
        'Cupos': [631, 886, 732, 675, 240, 560, 183, 291, 408, 807],
        'Hora inicio (24h)': ['14:00:00', '10:00:00', '14:00:00', '10:00:00', '14:00:00',
                              '10:00:00', '14:00:00', '10:00:00', '14:00:00', '10:00:00'],
        'nal (24h)': ['16:00:00', '12:00:00', '16:00:00', '12:00:00', '16:00:00',
                      '12:00:00', '16:00:00', '12:00:00', '16:00:00', '12:00:00'],
        'Dirigido': ['Inter√©s Gel', 'Directivos', 'Responsal', 'Jefes de pr', 'Inter√©s Gel',
                     'Directivos', 'Responsal', 'Jefes de pr', 'Inter√©s Gel', 'Directivos'],
        'Objetivos': [f'Objetivo {i}' for i in range(1, 11)]
    }
    
    # Archivo base (temas y m√≥dulos 2018-24)
    base_data = {
        'Tema': [
            'DECRETO 1072 DEL 2015: BASE FUNDAMENTAL DEL SG-SST',
            'FUNCIONES Y RESPONSABILIDADES COPASST',
            'RECONOCIENDO Y PREVIENDO LOS RIESGOS PSIQ',
            'GESTI√ìN DE INDEPENDIENTES Y SU IMPORTANCIA',
            'ASPECTOS B√ÅSICOS DEL SG-SST',
            'AUDITOR√çA INTERNA DENTRO DEL SG-SST',
            'BRIGADISTA INTERMEDIO',
            'COACHING EN INTELIGENCIA EMOCIONAL',
            'COACHING EN SBC',
            'COACHING PARA LA SEGURIDAD Y SALUD EN EL TRABAJO',
            'COMIT√âS DE CONVIVENCIA EFECTIVOS',
            'C√ìMO ACTUAR FRENTE AL RIESGO P√öBLICO',
            'COMPORTAMIENTO SEGURO FRENTE AL RIESGO BIOL√ìGICO',
            'COMUNICACI√ìN ASERTIVA EN SST',
            'CONCIENCIA Y CUIDADO: POL√çTICA DE PREVENCI√ìN DE CONSUM'
        ],
        'M√≥dulo': [
            'Marco Legal',
            'Componentes del Sistema de Gesti√≥n en Segu',
            'Psicoergonomia',
            'Marco Legal',
            'Componentes del Sistema de Gesti√≥n en Segu',
            'Especializados',
            'Brigadista Integral',
            'Sostenibilidad Empresarial',
            'Seguridad Industrial',
            'Salud Laboral',
            'Psicoergonomia',
            'Biomec√°nico',
            'Higiene y seguridad industrial',
            'Prevenci√≥n integral en emergencias',
            'Riesgo p√∫blico'
        ],
        'id': [11, 2, 14, 4, 2, 12, 10, 6, 4, 8, 15, 16, 17, 18, 19],
        'mid': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        'nameMod': [
            'Marco Legal',
            'Componentes del Sistema de Gesti√≥n en Segu',
            'Psicoergonomia',
            'Marco Legal',
            'Componentes del Sistema de Gesti√≥n en Segu',
            'Especializados',
            'Brigadista Integral',
            'Sostenibilidad Empresarial',
            'Seguridad Industrial',
            'Salud Laboral',
            'Psicoergonomia',
            'Biomec√°nico',
            'Higiene y seguridad industrial',
            'Prevenci√≥n integral en emergencias',
            'Riesgo p√∫blico'
        ]
    }
    
    return pd.DataFrame(source_data), pd.DataFrame(base_data)

def ejemplo_mapeo_simple():
    """Ejemplo 1: Mapeo simple como se describe en el caso del usuario"""
    print("üéØ EJEMPLO 1: Mapeo Simple (Tu Caso Principal)")
    print("=" * 60)
    
    # Crear datos de ejemplo
    source_df, base_df = crear_datos_ejemplo()
    
    print("üìÅ Archivo Fuente (capacitaciones_virtuales_2025.xlsx):")
    print(f"   - Filas: {len(source_df)}")
    print(f"   - Columnas: {list(source_df.columns)}")
    print()
    
    print("üìÅ Archivo Base (temas_modulos_2018_24.xlsx):")
    print(f"   - Filas: {len(base_df)}")
    print(f"   - Columnas: {list(base_df.columns)}")
    print()
    
    # Crear MappingManager
    mapping_manager = MappingManager()
    mapping_manager.set_base_dataframe(base_df)
    
    # PASO 1: Crear mapeo din√°mico
    print("üîß PASO 1: Crear mapeo din√°mico")
    print("   Configuraci√≥n:")
    print("   - Columna de referencia (archivo fuente): 'Nombre programa'")
    print("   - Columna clave (archivo base): 'Tema'")
    print("   - Columna valor (archivo base): 'id'")
    print()
    
    mapping_id = mapping_manager.create_dynamic_mapping(
        source_column='Nombre programa',
        base_key_column='Tema',
        base_value_column='id'
    )
    
    print(f"   ‚úÖ Mapeo creado con ID: {mapping_id}")
    
    # PASO 2: Aplicar mapeo
    print("\nüîß PASO 2: Aplicar mapeo al archivo fuente")
    mapped_values = mapping_manager.apply_dynamic_mapping(
        source_df=source_df,
        mapping_id=mapping_id,
        default_value='NO_ENCONTRADO'
    )
    
    # PASO 3: Mostrar resultados
    print("\nüìä RESULTADOS DEL MAPEO:")
    print("-" * 80)
    print(f"{'#':<3} {'Nombre Programa':<50} {'ID Mapeado':<12}")
    print("-" * 80)
    
    for i, (programa, mapped_id) in enumerate(zip(source_df['Nombre programa'], mapped_values), 1):
        programa_short = programa[:47] + "..." if len(programa) > 50 else programa
        print(f"{i:<3} {programa_short:<50} {mapped_id:<12}")
    
    # PASO 4: Estad√≠sticas
    print("\nüìà ESTAD√çSTICAS:")
    stats = mapping_manager.validate_mapping(mapping_id)
    print(f"   - Total de entradas en mapeo: {stats['total_entries']}")
    print(f"   - Valores √∫nicos encontrados: {stats['unique_values']}")
    print(f"   - Tipos de valores: {stats['value_types']}")
    
    return mapped_values

def ejemplo_mapeo_multi_columna():
    """Ejemplo 2: Mapeo multi-columna para casos con ambig√ºedades"""
    print("\n\nüéØ EJEMPLO 2: Mapeo Multi-Columna (Para Evitar Ambig√ºedades)")
    print("=" * 70)
    
    # Crear datos con ambig√ºedades (mismo programa en diferentes fechas)
    source_data = {
        'Nombre programa': [
            'DECRETO 1072 DEL 2015: BASE FUNDAMENTAL DEL SG-SST',
            'DECRETO 1072 DEL 2015: BASE FUNDAMENTAL DEL SG-SST',  # Duplicado
            'ASPECTOS B√ÅSICOS DEL SG-SST',
            'ASPECTOS B√ÅSICOS DEL SG-SST'  # Duplicado
        ],
        'Ciudad': ['Virtual', 'Presencial', 'Virtual', 'Presencial'],
        'Fecha (DD/MM/AA)': ['18/02/25', '18/02/25', '25/02/25', '25/02/25']
    }
    
    base_data = {
        'Tema': [
            'DECRETO 1072 DEL 2015: BASE FUNDAMENTAL DEL SG-SST',
            'DECRETO 1072 DEL 2015: BASE FUNDAMENTAL DEL SG-SST',
            'ASPECTOS B√ÅSICOS DEL SG-SST',
            'ASPECTOS B√ÅSICOS DEL SG-SST'
        ],
        'Ciudad': ['Virtual', 'Presencial', 'Virtual', 'Presencial'],
        'Fecha (DD/MM/AA)': ['18/02/25', '18/02/25', '25/02/25', '25/02/25'],
        'id': [11, 12, 2, 3]  # IDs diferentes para distinguir
    }
    
    source_df = pd.DataFrame(source_data)
    base_df = pd.DataFrame(base_data)
    
    # Crear MappingManager
    mapping_manager = MappingManager()
    mapping_manager.set_base_dataframe(base_df)
    
    print("üîß Configuraci√≥n de mapeo multi-columna:")
    print("   - Columna principal: 'Nombre programa'")
    print("   - Columnas adicionales: ['Ciudad', 'Fecha (DD/MM/AA)']")
    print("   - Objetivo: Evitar ambig√ºedades cuando el mismo programa aparece en diferentes fechas")
    print()
    
    # Crear mapeo multi-columna
    mapping_id = mapping_manager.create_dynamic_mapping(
        source_column='Nombre programa',
        base_key_column='Tema',
        base_value_column='id',
        additional_keys=['Ciudad', 'Fecha (DD/MM/AA)']
    )
    
    # Aplicar mapeo
    mapped_values = mapping_manager.apply_dynamic_mapping(
        source_df=source_df,
        mapping_id=mapping_id,
        default_value='NO_ENCONTRADO'
    )
    
    # Mostrar resultados
    print("üìä RESULTADOS DEL MAPEO MULTI-COLUMNA:")
    print("-" * 90)
    print(f"{'#':<3} {'Programa':<40} {'Ciudad':<10} {'Fecha':<10} {'ID':<5}")
    print("-" * 90)
    
    for i, (programa, ciudad, fecha, mapped_id) in enumerate(
        zip(source_df['Nombre programa'], source_df['Ciudad'], 
            source_df['Fecha (DD/MM/AA)'], mapped_values), 1):
        programa_short = programa[:37] + "..." if len(programa) > 40 else programa
        print(f"{i:<3} {programa_short:<40} {ciudad:<10} {fecha:<10} {mapped_id:<5}")
    
    print("\nüí° Observaci√≥n: Ahora cada combinaci√≥n √∫nica tiene su propio ID")
    
    return mapped_values

def ejemplo_integracion_column_config():
    """Ejemplo 3: Integraci√≥n completa con ColumnConfig"""
    print("\n\nüéØ EJEMPLO 3: Integraci√≥n con ColumnConfig (Como en la UI)")
    print("=" * 60)
    
    # Crear datos de ejemplo
    source_df, base_df = crear_datos_ejemplo()
    
    # Crear configuraci√≥n de columna como se har√≠a en la interfaz
    col_config = ColumnConfig(
        name='codigo_modulo',
        display_name='C√≥digo M√≥dulo',
        data_type=DataType.NUMBER,
        is_generated=True,
        position=1,
        mapping_source='Nombre programa',
        mapping_key_column='Tema',
        mapping_value_column='id',
        mapping_additional_keys=[]  # Sin columnas adicionales para mapeo simple
    )
    
    print("üîß Configuraci√≥n de columna creada:")
    print(f"   - Nombre: {col_config.display_name}")
    print(f"   - Tipo: {col_config.data_type.value}")
    print(f"   - Es generada: {col_config.is_generated}")
    print(f"   - Posici√≥n: {col_config.position}")
    print(f"   - Mapeo: {col_config.mapping_source} ‚Üí {col_config.mapping_key_column} ‚Üí {col_config.mapping_value_column}")
    print()
    
    # Crear MappingManager
    mapping_manager = MappingManager()
    mapping_manager.set_base_dataframe(base_df)
    
    # Crear mapeo usando la configuraci√≥n
    mapping_id = mapping_manager.create_dynamic_mapping(
        source_column=col_config.mapping_source,
        base_key_column=col_config.mapping_key_column,
        base_value_column=col_config.mapping_value_column,
        additional_keys=col_config.mapping_additional_keys
    )
    
    # Aplicar mapeo
    mapped_values = mapping_manager.apply_dynamic_mapping(
        source_df=source_df,
        mapping_id=mapping_id,
        default_value=0
    )
    
    # Crear DataFrame de resultado
    result_df = source_df.copy()
    result_df[col_config.display_name] = mapped_values
    
    print("üìä RESULTADO FINAL (DataFrame con columna mapeada):")
    print("-" * 100)
    print(result_df[['Nombre programa', col_config.display_name]].head(10))
    
    print(f"\n‚úÖ Columna '{col_config.display_name}' agregada exitosamente con {len(mapped_values)} valores")
    
    return result_df

def main():
    """Funci√≥n principal del ejemplo"""
    print("üöÄ EJEMPLO PR√ÅCTICO: MAPEO DIN√ÅMICO EN EXCELBUILDERPRO")
    print("=" * 70)
    print("Este ejemplo muestra c√≥mo usar el mapeo din√°mico mejorado")
    print("para el caso espec√≠fico descrito en las im√°genes.")
    print()
    
    try:
        # Ejecutar ejemplos
        ejemplo_mapeo_simple()
        ejemplo_mapeo_multi_columna()
        ejemplo_integracion_column_config()
        
        print("\n" + "=" * 70)
        print("‚úÖ TODOS LOS EJEMPLOS COMPLETADOS EXITOSAMENTE!")
        print("\nüí° Para usar en ExcelBuilderPro:")
        print("   1. Cargar archivo fuente (capacitaciones_virtuales_2025.xlsx)")
        print("   2. Cargar archivo base (temas_modulos_2018_24.xlsx)")
        print("   3. Ir a pesta√±a 'Columnas'")
        print("   4. Configurar columna 'C√≥digo m√≥dulo' como generada")
        print("   5. Activar mapeo din√°mico con la configuraci√≥n mostrada")
        print("   6. Exportar y verificar resultados")
        
    except Exception as e:
        print(f"\n‚ùå Error en los ejemplos: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
